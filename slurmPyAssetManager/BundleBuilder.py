#
#	slurmPyAssetManager: Tools for building asset bundles
#
#
#	License: MIT License
#	
#	Copyright 2023 J.R.Sharp
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#

import slurmPyAssetManager.FileBuilder as fbuilder 
import slurmPyAssetManager.ImageBuilder as ibuilder 
import slurmPyAssetManager.TilemapBuilder as tbuilder 


builder_dict = {
	'chiptune' : fbuilder.build,
	'image'    : ibuilder.build, 
	'tilemap'  : tbuilder.build,
	'image_palette' : ibuilder.build_palette,
	'applet' : fbuilder.build
}

def build(options = None, build_directory = None, bundle_file = None, bundle_header = None):

	constants = {}
	names = {}

	with open(bundle_file, "wb") as bfile:

		print("Opened file")

		for fil_nam, typ, name, pad_align  in options['bundle_files']:
			print("Bundling {} : {}".format(fil_nam, name))

			if name in names:
				raise ValueError("Name {} is already defined".format(name))
			names[name] = True

			offset, size = builder_dict[typ](bfile, build_directory, fil_nam, typ, name, pad_align)

			offset += options['bundle_load_address'] 
			constants[name + "_flash_offset_lo"] = offset & 0xffff
			constants[name + "_flash_offset_hi"] = (offset >> 16) & 0xffff
			constants[name + "_flash_size_lo"] = size & 0xffff
			constants[name + "_flash_size_hi"] = (size >> 16) & 0xffff


	# Generate header

	with open(bundle_header, "w") as hfile:

		hfile.write("/* Bundle Header -\n")
		hfile.write(" * Auto generated by slurmPyAssetManager. DO NOT EDIT! */\n")
		hfile.write("\n")

		for const, val in constants.items():
			hfile.write("#define {} 0x{:04x}\n".format(const, val))

